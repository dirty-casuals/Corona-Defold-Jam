go.property("angular_velocity", 5)
go.property("linear_velocity", 200)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/camera", "acquire_camera_focus")

	msg.post("/player/robot", "request_collisions")
	
	self.move = 0		-- direction of movement (0 = standing still, 1 = forward, -1 = backward)
	self.rotate = 0		-- direction of rotation (0 = no rotation, 1 = left, -1 = right)
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post("/camera", "release_camera_focus")
end

function update(self, dt)
	local rotation = go.get_rotation()
	-- handle rotation from key input left/right
	if self.rotate ~= 0 then
		rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
		go.set_rotation(rotation)
	-- rotate towards the latest mouse/touch location
	-- take into account camera position
	elseif self.touch then
		local to = go.get_position() - go.get_position("/camera")
		local from = vmath.vector3(self.touch.x, self.touch.y, 0)
		local angle = math.atan2(to.x - from.x, from.y - to.y)
		rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)
		self.touch = nil
	end
	
	-- move in direction of rotation
	local pos = go.get_position()
	if self.move ~= 0 then
		local distance = self.linear_velocity * self.move * dt
		local direction = vmath.rotate(rotation, vmath.vector3(0, distance, 0))
		pos = pos + direction
		go.set_position(pos)
	end
	
	-- update camera position
	go.set_position(pos + vmath.vector3(-568, - 320, 0), "/camera")
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.rotate = action.released and 0 or 1

		if action.released then
			self.rotate = 0
		else
			self.rotate = 1
		end
	elseif action_id == hash("right") then
		self.rotate = action.released and 0 or -1
	end
	
	if action_id == hash("up") then
		self.move = action.released and 0 or 1
	elseif action_id == hash("down") then
		self.move = action.released and 0 or -1
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("robot_collision") then
		if message.collision.group == hash("wall") then
			go.set_position(go.get_position() + message.collision.normal * message.collision.distance)
		elseif message.collision.group == hash("robot") then
			go.delete(message.collision.other_id)
		end
	end
end
