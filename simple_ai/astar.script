local astar = require("astar/astar")
local TILE_SIZE = 64
local ZORDER_PATH = 0.5
local level = {}
local level_size = {}
local width = {}
local height = {}

-- Takes a 1 based array index, creates a zero based 2d tile coordinate
local function index_to_coords(index, width)
    local x = math.floor((index-1) % width)
    local y = math.floor((index-1) / width)
    return x, y
end

-- Takes a zero based 2d tile coordinate, and the level width (tiles)
-- Returns a 1 based array index 
local function coords_to_index(x, y, width)
    return y * width + x + 1
end

-- Takes a zero based 2d tile coordinate, returns a 2d screen coordinate
local function coords_to_screen(x, y)
    local scrx = TILE_SIZE * x + TILE_SIZE / 2
    local scry = TILE_SIZE * y + TILE_SIZE / 2
    return scrx, scry
end

-- Takes a 2d screen coordinate, returns a zero based 2d tile coordinate
local function screen_to_coords(x, y)
    return math.floor(x / TILE_SIZE), math.floor(y / TILE_SIZE)
end


local function snap_screen_to_tile_center(x, y)
    local snapped_x = math.floor(x / TILE_SIZE) * TILE_SIZE + TILE_SIZE / 2
    local snapped_y = math.floor(y / TILE_SIZE) * TILE_SIZE + TILE_SIZE / 2
    return snapped_x, snapped_y
end

local function vector_to_tile(vect)
    local coord_x, coord_y = screen_to_coords(vect.x, vect.y)

	return coords_to_index(coord_x, coord_y, level_size.x)
end

function generate_path(start, goal)
	local path = {}

	start = vector_to_tile(start)
	goal = vector_to_tile(goal)
    came_from, cost_so_far = astar.astar_grid({width, height}, level, start, goal)

    local current = goal
    while current ~= start do
        if current == nil then
            break
        end

        local lx, ly = index_to_coords(current, width)
        local scrx, scry = coords_to_screen(lx, ly)
        if current ~= goal then
        	-- local pathitem = factory.create("/go#factory", vmath.vector3(scrx, scry, ZORDER_PATH+0.05) )
       	end

		path[#path + 1] = vmath.vector3(scrx, scry, 1.0)

        local next = came_from[current]
        local cost = cost_so_far[current]
        -- print(current, "->", next,"->", cost)
        current = next
    end

	return path
end

function init(self)
    levelx, levely, width, height = tilemap.get_bounds("/level1/level#level1")
    level_size = vmath.vector3(width, height, 0)

	-- Create cost of each tile, tiles with walls on are very high cost
	local tile_wall_cost = 10000
    for ly = 0, height - 1 do
	    for lx = 0, width - 1 do
			local tile_idx_x = lx + 1
			local tile_idx_y = ly + 1
	        local tile_wall = tilemap.get_tile("/level1/level#level1", hash("walls"), tile_idx_x, tile_idx_y)
			local tile = 1
			if tile_wall > 0 then
				tile = tile_wall_cost
			end

            level[ly * width + lx + 1] = tile
	    end
    end

	-- Second pass to slightly increase the cost of tiles next to walls
    for idx = 1, #level, 1 do
		if level[idx] ~= tile_wall_cost then
			local tile_right = idx + 1
			local tile_left = idx - 1
			local tile_up = idx + width
			local tile_down = idx - width

			if level[tile_right] == tile_wall_cost or
				level[tile_left] == tile_wall_cost or
				level[tile_up] == tile_wall_cost or
				level[tile_down] == tile_wall_cost then
				level[idx] = 5
			end
		end
	end

	-- local start_screen = go.get_position()
    -- local start_coord_x, start_coord_y = screen_to_coords(start_screen.x, start_screen.y)
    -- self.coord_start = { start_coord_x, start_coord_y }
    -- self.coord_start_index = coords_to_index(self.coord_start[1], self.coord_start[2], self.level_size.x)
    -- local start_screen_x, start_screen_y = coords_to_screen(self.coord_start[1], self.coord_start[2])
    -- -- go.set_position(vmath.vector3(start_screen_x, start_screen_y, 1))

    -- local goal_screen = vmath.vector3(1000.0, 600.0, 0)
    -- local goal_coord_x, goal_coord_y = screen_to_coords(goal_screen.x, goal_screen.y)
    -- self.coord_goal = { goal_coord_x, goal_coord_y }
    -- self.coord_goal_index = coords_to_index(self.coord_goal[1], self.coord_goal[2], self.level_size.x)
    -- local goal_screen_x, goal_screen_y = coords_to_screen(self.coord_goal[1], self.coord_goal[2])
    -- -- go.set_position(vmath.vector3(goal_screen_x, goal_screen_y, 1), "/ai1/ai")

	-- local start = coords_to_index(self.coord_start[1], self.coord_start[2], self.level_size.x)
	-- local goal = coords_to_index(self.coord_goal[1], self.coord_goal[2], self.level_size.x)

	-- generate_path(go.get_position(), vmath.vector3(1000.0, 600.0, 0), level, width, height)
end
