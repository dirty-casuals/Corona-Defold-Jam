local constants = require "constants"
local camera = require("camera.camera")

go.property("minimum_circle_scale", 2.0)
go.property("siphon_drain_rate", 30.0)
go.property("power_level", 100.0)
go.property("max_power_level", 100.0)

local function send_sound_message(self, sound, play)
	msg.post(constants.SOUND_MANAGER, constants.PLAY_SOUND, {sound = msg.url(nil, go.get_id("sounds"), sound), play = play})
end

local function is_siphon_enabled(alert_level, siphoned)
	return alert_level > 0.0 and siphoned ~= true
end

local function get_alert_level(self)
	return go.get(self.ai_script_url, "alert_level")
end

local function get_siphoned(self)
	return go.get(self.ai_script_url, "siphoned")
end

local function get_siphon_size(power_level, min_scale, max_scale)
	local gui_level = power_level / 100
	local scale = gui_level * max_scale.x
	local scale_vect = vmath.vector3(scale, scale, scale)

	return vmath.lerp(gui_level, min_scale, max_scale)
end

local function siphon_from_player(self, dt)
	local player_pos = go.get_position("/player/player")
	local dist_to_player = vmath.length(go.get_position() - player_pos)
	local circle_size = go.get("circle#circle", "size")
	local circle_scale = go.get_scale("circle").x / self.power_circle_start_scale.x
	local circle_factor = circle_size.x * circle_scale
	if dist_to_player <= circle_factor then
		local player_url = msg.url(nil, "/player/player", "player_power")
		local player_power = go.get(player_url, "power_level")

		if player_power > 0 then
			go.set(player_url, "power_level", player_power - (self.siphon_drain_rate *dt))
			self.power_level = self.power_level +  (self.siphon_drain_rate *dt)
		end
	end
end

local function update_siphon(self, dt)
	local was_siphon_enabled = self.siphon_enabled
	self.siphon_enabled = is_siphon_enabled(get_alert_level(self), get_siphoned(self))
	if self.siphon_enabled then
		local new_siphon_size = get_siphon_size(self.power_level, self.min_scale_circle_vect, self.power_circle_start_scale)
		go.set_scale(new_siphon_size, "circle")
		siphon_from_player(self, dt)

		if was_siphon_enabled ~= self.siphon_enabled then
			msg.post("circle", "enable")
			send_sound_message(self, constants.SIPHON_SOUND, true)
			self.sound_playing = true
		end
	else
		if was_siphon_enabled ~= self.siphon_enabled then
			msg.post("circle", "disable")
			send_sound_message(self, constants.SIPHON_SOUND, false)
			self.sound_playing = false
		end
	end
end

local function die(self)
	msg.post(constants.SOUND_MANAGER, constants.ROBOT_DEATH, {play = true})
	msg.post("/gui#hud", constants.UNREGISTER_POWER_BAR, {id = go.get_id()})
	msg.post("circle", "disable")
	msg.post("cone", "disable")
	sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
end

function init(self)
	self.ai_script_url = msg.url(nil, id, constants.AI_SCRIPT)
	self.power_circle_start_scale = go.get_scale("circle")
	self.min_scale_circle_vect = vmath.vector3(self.minimum_circle_scale, self.minimum_circle_scale, self.minimum_circle_scale)
	self.screen_height = tonumber(sys.get_config("display.height"))
	self.screen_width = tonumber(sys.get_config("display.width"))
	self.was_in_screen = false
	self.color = vmath.vector4(math.random(), math.random(), math.random(), 0.5)
	self.block_color = vmath.vector4(self.color.x, self.color.y, self.color.z, 1.0)
	self.siphon_enabled = false
	self.sound_playing = false
	msg.post("circle", "disable")
	sprite.set_constant("circle", "tint", self.color)
	sprite.set_constant("#sprite", "tint", self.block_color)
	sprite.set_constant("cone", "tint", self.color)
end

function update(self, dt)
	if go.get(self.ai_script_url, "dead") then
		return
	end

	local in_screen = camera.is_go_on_screen(go.get_id("/ortho"), go.get_position(), self.screen_width, self.screen_height)

	if in_screen ~= self.was_in_screen then
		if in_screen then
			msg.post("/gui#hud", constants.REGISTER_POWER_BAR, {id = go.get_id(), color = self.block_color})
			if self.sound_playing == true then
				send_sound_message(self, constants.SIPHON_SOUND, true)
			end
		else
			msg.post("/gui#hud", constants.UNREGISTER_POWER_BAR, {id = go.get_id()})
			if self.sound_playing == true then
				send_sound_message(self, constants.SIPHON_SOUND, false)
			end
		end
	end

	if in_screen then
		msg.post("/gui#hud", constants.AI_POWER_UPDATE, {id = go.get_id(), power_level = self.power_level})
		if get_siphoned(self) ~= true then
			update_siphon(self, dt)
		end
		if self.power_level > self.max_power_level then
			self.power_level = self.max_power_level
		end
	end

	self.was_in_screen = in_screen

	if self.power_level <= 0.0 then
		go.set(self.ai_script_url, "dead", true)
		die(self)
	end
end
