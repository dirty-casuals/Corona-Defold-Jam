local constants = require "constants"
local camera = require "orthographic.camera"

go.property("alerted_scan_distance_tiles",  6)
go.property("scan_distance_tiles",  4)
go.property("distance_to_give_up", 16.0)
go.property("speed", 100)
go.property("siphoned", false)
go.property("alert_level", 0.0)
go.property("patrol_end_pos", vmath.vector3(0,0,0))

local function scan(self)
	local pos = go.get_position()
	local rot = 2 * math.asin(go.get_rotation().z)

	for angle_idx, angle in pairs(self.scan_angles) do
		local ray_angle = angle - rot
		local scan_distance = self.scan_distance_tiles
		local cone_scale = self.scan_distance_tiles
		if self.alert_level > 0.0 then
			scan_distance = self.alerted_scan_distance_tiles
			cone_scale = self.alerted_scan_distance_tiles
		end
		local projection_length = constants.TILE_SIZE * scan_distance
		local new_y = math.cos(ray_angle) * projection_length
		local new_x = math.sin(ray_angle) * projection_length

		local new_vect = vmath.vector3(pos.x + new_x, pos.y + new_y, pos.z)

		physics.ray_cast(pos, new_vect, self.scan_for, angle_idx)
		go.set_scale(vmath.vector3(cone_scale, cone_scale, 1.0), "cone")
	end
end

local function move_to_target(self, dt)
	if self.waypoint ~= nil then
		local pos = go.get_position()
		local target_angle = -math.atan2(self.waypoint.x - pos.x, self.waypoint.y - pos.y)
		local current_quat = go.get_rotation()
		local target_quat = vmath.quat_rotation_z(target_angle)

		local q = vmath.slerp(0.08, current_quat, target_quat)
		go.set_rotation(q)

		local d = vmath.rotate(q, vmath.vector3(0, 1, 0))
		go.set_position(pos + d * self.speed * dt)
	end
end

local function set_goal(self, new_goal)
	self.goal = new_goal
	if new_goal == nil then
		self.path = {}
		self.waypoint = nil
	else
		self.path = generate_path(go.get_position(), self.goal)
		table.insert(self.path, 1, self.goal)
		self.waypoint = table.remove(self.path)
	end
end

local function update_goal(self)
	local dist_to_target = vmath.length(go.get_position() - self.goal)
	if self.does_patrol then
		if self.goal == self.start_pos and dist_to_target <= self.distance_to_give_up then
			set_goal(self, self.patrol_end_pos)
		elseif self.goal == self.patrol_end_pos and dist_to_target <= self.distance_to_give_up then
			set_goal(self, self.start_pos)
		elseif (self.goal ~= self.patrol_end_pos and self.goal ~= self.start_pos) or self.chasing then
			set_goal(self, self.start_pos)
		end
	else
		if self.goal == self.start_pos and dist_to_target <= self.distance_to_give_up then
			set_goal(self, nil)
		else
			set_goal(self, self.start_pos)
		end
	end
end

local function update_power_level(self, dt)
	self.alert_level = self.alert_level + (self.alert_rate * dt)
	if self.alert_level < 0.0 then
		self.alert_level = 0.0
	elseif self.alert_level > 100.0 then
		self.alert_level = 100.0
	end
end

local function update_path(self)
	if self.path == {} then
		return
	end

	-- if self.waypoint == nil then
	-- 	self.waypoint = table.remove(self.path, 1)
	-- 	return
	-- end

	local dist_to_waypoint = vmath.length(go.get_position() - self.waypoint)
	if dist_to_waypoint <= self.distance_to_give_up then
		self.waypoint = table.remove(self.path)
	end
end

function init(self)
	self.scan_for = {hash(constants.ROBOT), hash(constants.WALL), hash(constants.PLAYER)}
	self.start_pos = go.get_position()
	self.start_angle = go.get_rotation()
	self.siphoned = false
	self.alert_level = 0.0
	self.alert_increase_rate = 30.0
	self.alert_decrease_rate = -10.0
	self.alert_rate = self.alert_decrease_rate
	self.does_patrol =self.patrol_end_pos ~= vmath.vector3(0,0,0)
	self.goal = go.get_position()
	self.screen_height = tonumber(sys.get_config("display.height"))
	self.screen_width = tonumber(sys.get_config("display.width"))
	self.normal_projection_length = constants.TILE_SIZE * self.scan_distance_tiles
	self.was_active = false
	self.path = {}
	self.scan_angles = {}
	for angle = -math.pi / 6, (math.pi / 6) + 0.01, 0.174533 do
		self.scan_angles[#self.scan_angles + 1] = angle
	end
	self.path = {}
	self.waypoint = nil
	self.chasing = false
end

function update(self, dt)
	local screen_pos = camera.world_to_screen(go.get_id("/ortho"), go.get_position())
	local near_screen_x = screen_pos.x < self.screen_width + self.normal_projection_length and screen_pos.x > 0.0 
	local near_screen_y = screen_pos.y < self.screen_height + self.normal_projection_length and screen_pos.y > 0.0 
	local active = (near_screen_x and near_screen_y) or self.alert_level > 0.0

	if self.siphoned == true then
		msg.post("cone", "disable")
	elseif active or self.siphoned ~= true then
		msg.post("cone", "enable")
		scan(self)
	end

	if self.siphoned ~= true then
		if self.alert_level == 0.0 then
			update_goal(self)
			self.chasing = false
		end
		update_path(self)
		move_to_target(self, dt)
	end

	update_power_level(self, dt)

	self.alert_rate = self.alert_decrease_rate
	self.siphoned = false
	self.was_active = active
end

function on_message(self, message_id, message, sender)
    if message_id == hash("ray_cast_response") then
		if message.group == hash(constants.PLAYER) then
			self.waypoint =  message.position
			self.chasing = true
			self.alert_rate = self.alert_increase_rate
		end
    elseif message_id == hash(constants.PLAYER_SIPHON) then
		self.siphoned = true
    elseif message_id == hash("contact_point_response") then
		if message.group == hash(constants.WALL) or message.group == hash(constants.ROBOT) or message.group == hash(constants.PLAYER) then
			go.set_position(go.get_position() + message.normal * message.distance)
			if message.group == hash(constants.PLAYER) and not self.siphoned then
				self.waypoint =  message.position
				self.chasing = true
				self.alert_rate = self.alert_increase_rate
			end
		end
	end
end
