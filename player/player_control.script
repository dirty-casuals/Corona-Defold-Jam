local constants = require "constants"
local camera = require "orthographic.camera"

go.property("angular_velocity", 5)
go.property("linear_velocity", 200)
go.property("dead", false)

function init(self)
	camera.follow(go.get_id("/ortho"), go.get_id())
	
	self.move = 0
	self.rotate = 0
	self.fire_listeners = {}
	self.firing = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.dead then
		return
	end

	local rotation = go.get_rotation()
	-- handle rotation from key input left/right
	if self.rotate ~= 0 then
		rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
		go.set_rotation(rotation)
	end
	
	-- move in direction of rotation
	local pos = go.get_position()
	if self.move ~= 0 then
		local distance = self.linear_velocity * self.move * dt
		local direction = vmath.rotate(rotation, vmath.vector3(0, distance, 0))
		pos = pos + direction
		go.set_position(pos)
	end
end

function on_input(self, action_id, action)
	if action_id == hash(constants.FIRE_BUTTON) then
		if action.pressed then
			self.firing = true
			for idx, listener in pairs(self.fire_listeners) do
				msg.post(listener, constants.FIRE_PRESS)
			end
		elseif action.released then
			self.firing = false
			for idx, listener in pairs(self.fire_listeners) do
				msg.post(listener, constants.FIRE_RELEASE)
			end
		end
	end

	if self.firing then
		self.rotate = 0
		self.move = 0
	else
		if action_id == hash("left") then
			self.rotate = action.released and 0 or 1
		elseif action_id == hash("right") then
			self.rotate = action.released and 0 or -1
		end
		
		if action_id == hash("up") then
			self.move = action.released and 0 or 1
		elseif action_id == hash("down") then
			self.move = action.released and 0 or -1
		end
	end
end

function on_message(self, message_id, message, sender)
	-- print(message_id)
	if message_id == hash(constants.LISTEN_FIRE_PRESS) then
		self.fire_listeners[#self.fire_listeners + 1] = sender
	elseif message_id == hash("contact_point_response") and message.group == hash(constants.WALL) then
		go.set_position(go.get_position() + message.normal * message.distance)
	elseif message_id == hash("trigger_response") and message.group == hash(constants.TUTORIAL) then
		msg.post("/gui#controls", constants.END_TUTORIAL)
	elseif message_id == hash(constants.DIE) then
		msg.post(".", "release_input_focus")
		self.dead = true
	elseif message_id == hash(constants.START_GAME) then
		msg.post(".", "acquire_input_focus")
	end
end
