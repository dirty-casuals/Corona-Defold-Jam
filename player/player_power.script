local constants = require "constants"

local POWER_LEVEL = 

go.property("power_level", 100.0)
go.property("movement_drain", -40.0)
go.property("extra_siphon_drain", -1.0)
go.property("siphon_drain_rate", 20.0)
go.property("minimum_circle_scale", 1.0)
go.property("max_power_level", 100.0)

local function send_message(listeners, message_id, message)
	for idx, listener in pairs(listeners) do
		msg.post(listener, message_id, message)
	end
end

local function send_power_outage(self)
	send_message(self.power_outage_listeners, constants.POWER_OUTAGE, {})
end

local function send_power_update(self)
	send_message(self.power_update_listeners, constants.POWER_UPDATE, {power_level = self.power_level})
end

local function update_power(self, drain, method)
	self.power_level = self.power_level + drain
	if self.power_level > self.max_power_level then
		self.power_level = self.max_power_level
	end
end

local function siphon_scan(self)
	if self.is_siphoning then
		local circle_size = go.get("circle#circle", "size")
		local circle_scale = go.get_scale("circle").x / self.power_circle_start_scale.x
		local circle_factor = circle_size.x * circle_scale
		local pos = go.get_position()
		for angle = -math.pi, math.pi, 0.261799 do
			local new_y = math.cos(angle) * circle_factor
			local new_x = math.sin(angle) * circle_factor

			local new_vect = vmath.vector3(pos.x + new_x, pos.y + new_y, pos.z)

			-- msg.post("@render:", "draw_line", { start_point = pos, end_point = new_vect, color = vmath.vector4(0, 0, 0, 1) } )
			physics.ray_cast(pos, new_vect, {hash(constants.ROBOT)})
		end
	end
end

local function toggle_power_drain(self, enable)
	self.is_siphoning = enable
	if enable then
		msg.post("circle", "enable")
		self.movement_drain = self.movement_drain + self.extra_siphon_drain
	else
		msg.post("circle", "disable")
		self.movement_drain = self.movement_drain - self.extra_siphon_drain
		self.ai_map = {}
	end
	msg.post(constants.SOUND_MANAGER, constants.PLAY_SOUND, {sound = msg.url(nil, go.get_id("sounds"), constants.SIPHON_SOUND), play = enable})
end

local function siphon(self, dt)
	for k, id in pairs(self.ai_map) do
		local ai_power_url = msg.url(nil, id, constants.AI_POWER_SCRIPT)
		local ai_url = msg.url(nil, id, constants.AI_SCRIPT)
		local ai_power = go.get(ai_power_url, "power_level")
		local ai_alerted = go.get(ai_url, "alert_level") > 0.0

		if ai_power > 0.0 and ai_alerted == false then
			local new_power = ai_power - (self.siphon_drain_rate *dt)
			go.set(ai_power_url, "power_level", new_power)

			if new_power > 0.0 then
				msg.post(ai_url, constants.PLAYER_SIPHON)
			end
			update_power(self, self.siphon_drain_rate * dt)
		end
	end
end

local function update_power_bar(self)
	send_power_update(self)

	if self.power_level <= 0 then
		self.power_level = 0
		send_power_outage(self)
	end

	local scale = (self.power_level / 100) * self.power_circle_start_scale.x
	local scale_vect = vmath.vector3(scale, scale, scale)
	local lerped_vect = vmath.lerp(self.power_level / 100, self.min_scale_circle_vect, self.power_circle_start_scale)
	go.set_scale(lerped_vect, "circle")
end

local function die(self)
	msg.post(constants.SOUND_MANAGER, constants.ROBOT_DEATH, {play = true})
	msg.post("circle", "disable")
	sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
	msg.post(constants.SOUND_MANAGER, constants.PLAY_SOUND, {sound = msg.url(nil, go.get_id("sounds"), constants.SIPHON_SOUND), play = false})
end

function init(self)
	self.prev_pos = go.get_world_position()
	self.power_outage_listeners = {}
	self.power_update_listeners = {}
	self.power_circle_start_scale = go.get_scale("circle")
	self.min_scale_circle_vect = vmath.vector3(self.minimum_circle_scale, self.minimum_circle_scale, self.minimum_circle_scale)
	self.is_siphoning = false
	self.ai_map = {}

	msg.post("circle", "disable")
	msg.post(".", constants.LISTEN_FIRE_PRESS)
end

function update(self, dt)
	if go.get("#player_control", "dead") then
		return
	end

	local new_pos = go.get_world_position()
	local distance = vmath.length(self.prev_pos - new_pos)
	local tiles = math.floor(distance / constants.TILE_SIZE)
	if tiles >= 1 then
		update_power(self, self.movement_drain * dt)
		self.prev_pos = go.get_world_position()
	end
	update_power_bar(self)

	if self.power_level <= 0.0 then
		msg.post("#player_control", constants.DIE)
		msg.post("/gui#controls", constants.DIE)
		die()
	end

	siphon_scan(self)
	siphon(self, dt)
	self.ai_map = {}
end

function on_message(self, message_id, message, sender)
	if message_id == hash(constants.LISTEN_POWER_OUTAGE) then
		self.power_outage_listeners[#self.power_outage_listeners + 1] = sender
	elseif message_id == hash(constants.LISTEN_POWER_UPDATE) then
		self.power_update_listeners[#self.power_update_listeners + 1] = sender
	elseif message_id == hash(constants.FIRE_PRESS) then
		toggle_power_drain(self, true)
	elseif message_id == hash(constants.FIRE_RELEASE) then
		toggle_power_drain(self, false)
    elseif message_id == hash("ray_cast_response") and message.group == hash(constants.ROBOT) then
		local ai_power_url = msg.url(nil, message.id, constants.AI_POWER_SCRIPT)
		local ai_power = go.get(ai_power_url, "power_level")

		if self.ai_map[message.id] == nil and ai_power > 0.0 then
			self.ai_map[message.id] = message.id
		end
	end
end
